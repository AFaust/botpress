{"version":3,"sources":["api.ts"],"names":["bp","bots","jsonUploadStatuses","router","http","createRouterForBot","get","req","res","storage","params","botId","items","fetch","send","e","logger","attachError","error","status","message","post","next","entry","KbEntry","validate","body","id","update","Error","model","loadLatestModel","forBot","info","readCSV","Promise","resolve","returnRows","csv","parseFile","path","join","__dirname","headers","on","data","push","all_rows","console","log","all_prediction","question_reponse","slice","predict","Question","Type","Source","Reponse","docs","content","filePath","writeToPath","err","process","env","BP_NLU_DISABLE_TRAINING","trainingModel","RemoteModel","entries","train","then","trained","storeModel","loadedModel","catch","finally","undefined","training","cancelTraining","delete","entryId","deleted","sendToastError","action","realtime","sendPayload","RealTimePayload","forAdmins","text","type","updateUploadStatus","uploadStatusId"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/kb/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport { Request, Response } from 'express'\nimport * as csv from 'fast-csv'\nimport fs from 'fs'\nimport _ from 'lodash'\nimport path from 'path'\nimport yn from 'yn'\n\nimport RemoteModel from './model'\nimport { Entry, ScopedBots } from './typings'\nimport { KbEntry } from './validation'\ninterface CSVRow {\n  Type: string\n  Source: string\n  Question: string\n  Reponse: string\n}\nexport default async (bp: typeof sdk, bots: ScopedBots) => {\n  const jsonUploadStatuses = {}\n  const router = bp.http.createRouterForBot('kb')\n\n  // /status --> train % , cancel token, started on, started by\n  // /predict (n) --> [ content suggestions (all lang), confidence, title, sorted, highlighted ]\n\n  router.get('/entries', async (req: Request, res: Response) => {\n    try {\n      const { storage } = bots[req.params.botId]\n      const items = await storage.fetch()\n      res.send({ ...items })\n    } catch (e) {\n      bp.logger.attachError(e).error('Error listing entries')\n      res.status(500).send(e.message || 'Error')\n    }\n  })\n\n  router.post('/entries', async (req: Request, res: Response, next: Function) => {\n    try {\n      const entry = await KbEntry.validate<Entry>(req.body)\n      const { storage } = bots[req.params.botId]\n      const id = await storage.update(entry)\n      res.send(id)\n    } catch (e) {\n      next(new Error(e.message))\n    }\n  })\n\n  router.get('/predictCSV', async (req: Request, res: Response) => {\n    // Load Model\n    const model = await bots[req.params.botId].storage.loadLatestModel()\n    bp.logger.forBot(req.params.botId).info(`Model loaded successfully`)\n    // Load Csv\n    const readCSV = (): Promise<CSVRow[]> =>\n      new Promise(resolve => {\n        const returnRows: CSVRow[] = []\n        csv\n          .parseFile(path.join(__dirname, '..', '..', 'assets', 'datas', 'historique_1000.csv'), {\n            headers: ['Type', 'Source', 'Question', 'Reponse']\n          })\n          .on('data', data => returnRows.push(data))\n          .on('end', () => {\n            resolve(returnRows)\n          })\n      })\n    const all_rows: CSVRow[] = await readCSV()\n    console.log(all_rows)\n    bp.logger.forBot(req.params.botId).info(`CSV loaded successfully`)\n    // Predict all questions\n    const all_prediction = []\n    for (const question_reponse of all_rows.slice(1)) {\n      // console.log(question_reponse.Question)\n      const res = await model.predict(question_reponse.Question, 'fr')\n      all_prediction.push([\n        question_reponse.Type,\n        question_reponse.Source,\n        question_reponse.Question,\n        question_reponse.Reponse,\n        res.docs[0].content\n      ])\n    }\n    bp.logger.forBot(req.params.botId).info(`Predictions successfully`)\n    const filePath = path.join(__dirname, '..', '..', 'assets', 'datas', 'deep_historique_1000.csv')\n    csv\n      .writeToPath(filePath, all_prediction)\n      .on('error', err => console.error(err))\n      .on('finish', () => {\n        console.log('Done')\n      })\n    bp.logger.forBot(req.params.botId).info(`CSV write successfully : ALL DONE`)\n    res.send('Done')\n  })\n\n  router.post('/train', async (req: Request, res: Response, next: Function) => {\n    try {\n      if (yn(process.env.BP_NLU_DISABLE_TRAINING)) {\n        throw new Error('Training disabled on this node')\n      }\n\n      if (bots[req.params.botId]?.trainingModel) {\n        throw new Error('Already training')\n      }\n\n      const model = new RemoteModel()\n      bots[req.params.botId].trainingModel = model\n      const entries = await bots[req.params.botId].storage.fetch()\n\n      // Floating promise on purpose, we want to return and keep training behind the scene\n      // We assume a single node training here\n      // TODO: Make this work in cluster training without BP_NLU_DISABLE_TRAINING\n      // tslint:disable-next-line: no-floating-promises\n      model\n        .train(entries)\n        .then(async trained => {\n          if (trained) {\n            await bots[req.params.botId].storage.storeModel(model)\n            bots[req.params.botId].loadedModel = model\n            bp.logger.forBot(req.params.botId).info(`Success training KB model`)\n          } else {\n            bp.logger.forBot(req.params.botId).info(`KB model training cancelled`)\n          }\n        })\n        .catch(err => {\n          bp.logger\n            .forBot(req.params.botId)\n            .attachError(err)\n            .error(`Could not train KB model`)\n        })\n        .finally(() => {\n          bots[req.params.botId].trainingModel = undefined\n        })\n\n      res.send({ training: true })\n    } catch (e) {\n      next(new Error(e.message))\n    }\n  })\n\n  router.post('/train/cancel', async (req: Request, res: Response, next: Function) => {\n    try {\n      if (yn(process.env.BP_NLU_DISABLE_TRAINING)) {\n        throw new Error('Training disabled on this node')\n      }\n\n      if (!bots[req.params.botId]?.trainingModel) {\n        throw new Error('Bot not training')\n      }\n\n      bots[req.params.botId].trainingModel.cancelTraining()\n\n      res.send({ training: false })\n    } catch (e) {\n      next(new Error(e.message))\n    }\n  })\n\n  router.delete('/entries/:entryId', async (req: Request, res: Response, next: Function) => {\n    try {\n      const { storage } = bots[req.params.botId]\n      await storage.delete(req.params.entryId)\n      res.send({ deleted: req.params.entryId })\n    } catch (e) {\n      next(new Error(e.message))\n    }\n  })\n\n  // router.delete('/entries/version/:versionId')\n\n  const sendToastError = (action: string, error: string) => {\n    bp.realtime.sendPayload(\n      bp.RealTimePayload.forAdmins('toast.qna-save', { text: `QnA ${action} Error: ${error}`, type: 'error' })\n    )\n  }\n\n  const updateUploadStatus = (uploadStatusId: string, status: string) => {\n    if (uploadStatusId) {\n      jsonUploadStatuses[uploadStatusId] = status\n    }\n  }\n}\n"]}