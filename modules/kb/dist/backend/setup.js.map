{"version":3,"sources":["setup.ts"],"names":["EVENTS_TO_IGNORE","initBot","bp","botId","bots","config","getModuleConfigForBot","defaultLang","getBotById","defaultLanguage","storage","Storage","model","loadLatestModel","catch","err","undefined","loadedModel","trainingModel","initModule","events","registerMiddleware","name","direction","handler","event","next","hasFlag","IO","WellKnownFlags","SKIP_QNA_PROCESSING","includes","type","processEvent","order","description","scopedBot","nlu","result","predict","preview","logger","debug","map","x","i","title","confidence","toFixed","answerSnippet","length","join"],"mappings":";;;;;;;AAGA;;;;AAGA,MAAMA,gBAAgB,GAAG,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,mBAAvC,EAA4D,OAA5D,EAAqE,eAArE,EAAsF,EAAtF,CAAzB;;AAEO,MAAMC,OAAO,GAAG,OAAOC,EAAP,EAAuBC,KAAvB,EAAsCC,IAAtC,KAA2D;AAChF,QAAMC,MAAM,GAAG,MAAMH,EAAE,CAACG,MAAH,CAAUC,qBAAV,CAAgC,IAAhC,EAAsCH,KAAtC,CAArB;AACA,QAAMI,WAAW,GAAG,CAAC,MAAML,EAAE,CAACE,IAAH,CAAQI,UAAR,CAAmBL,KAAnB,CAAP,EAAkCM,eAAtD,CAFgF,CAEV;;AAEtE,QAAMC,OAAO,GAAG,IAAIC,gBAAJ,CAAYT,EAAZ,EAAgBC,KAAhB,CAAhB;AACA,QAAMS,KAAK,GAAG,MAAMF,OAAO,CAACG,eAAR,GAA0BC,KAA1B,CAAgCC,GAAG,IAAIC,SAAvC,CAApB;AACAZ,EAAAA,IAAI,CAACD,KAAD,CAAJ,GAAc;AAAEO,IAAAA,OAAF;AAAWL,IAAAA,MAAX;AAAmBE,IAAAA,WAAnB;AAAgCU,IAAAA,WAAW,EAAEL,KAA7C;AAAoDM,IAAAA,aAAa,EAAEF;AAAnE,GAAd;AACD,CAPM;;;;AASA,MAAMG,UAAU,GAAG,OAAOjB,EAAP,EAAuBE,IAAvB,KAA4C;AACpEF,EAAAA,EAAE,CAACkB,MAAH,CAAUC,kBAAV,CAA6B;AAC3BC,IAAAA,IAAI,EAAE,aADqB;AAE3BC,IAAAA,SAAS,EAAE,UAFgB;AAG3BC,IAAAA,OAAO,EAAE,OAAOC,KAAP,EAAoCC,IAApC,KAA6C;AACpD,UAAI,CAACD,KAAK,CAACE,OAAN,CAAczB,EAAE,CAAC0B,EAAH,CAAMC,cAAN,CAAqBC,mBAAnC,CAAD,IAA4D,CAAC9B,gBAAgB,CAAC+B,QAAjB,CAA0BN,KAAK,CAACO,IAAhC,CAAjE,EAAwG;AACtG,cAAMC,YAAY,CAACR,KAAD,EAAQrB,IAAI,CAACqB,KAAK,CAACtB,KAAP,CAAZ,CAAlB;AACAuB,QAAAA,IAAI;AACL;AACF,KAR0B;AAS3BQ,IAAAA,KAAK,EAAE,EAToB;AAShB;AACXC,IAAAA,WAAW,EAAE;AAVc,GAA7B;;AAaA,QAAMF,YAAY,GAAG,OAAOR,KAAP,EAAoCW,SAApC,KAA6D;AAChF,QAAI,CAACX,KAAK,CAACY,GAAX,EAAgB;AACd;AACD;;AAED,QAAID,SAAS,IAAIA,SAAS,CAACnB,WAA3B,EAAwC;AACtC,YAAMqB,MAAM,GAAG,MAAMF,SAAS,CAACnB,WAAV,CAAsBsB,OAAtB,CAA8Bd,KAAK,CAACe,OAApC,EAA6C,IAA7C,CAArB,CADsC,CAEtC;;AACAtC,MAAAA,EAAE,CAACuC,MAAH,CAAUC,KAAV,CACG,iBAAgBjB,KAAK,CAACe,OAAQ,+BAA/B,GACEF,MAAM,CACHK,GADH,CAEI,CAACC,CAAD,EAAIC,CAAJ,KAAW,GAAEA,CAAE,KAAID,CAAC,CAACE,KAAM,KAAIF,CAAC,CAACG,UAAF,CAAaC,OAAb,CAAqB,CAArB,CAAwB,MAAKJ,CAAC,CAACK,aAAc,KAAIL,CAAC,CAACK,aAAF,CAAgBC,MAAO,GAF3G,EAIGC,IAJH,CAIQ,MAJR,CAFJ;AAQD,KAhB+E,CAkBhF;AACA;AAEA;;AACD,GAtBD;AAuBD,CArCM","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/kb/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\n\nimport Storage from './storage'\nimport { BotParams, ScopedBots } from './typings'\n\nconst EVENTS_TO_IGNORE = ['session_reference', 'session_reset', 'bp_dialog_timeout', 'visit', 'say_something', '']\n\nexport const initBot = async (bp: typeof sdk, botId: string, bots: ScopedBots) => {\n  const config = await bp.config.getModuleConfigForBot('kb', botId)\n  const defaultLang = (await bp.bots.getBotById(botId)).defaultLanguage //\n\n  const storage = new Storage(bp, botId)\n  const model = await storage.loadLatestModel().catch(err => undefined)\n  bots[botId] = { storage, config, defaultLang, loadedModel: model, trainingModel: undefined }\n}\n\nexport const initModule = async (bp: typeof sdk, bots: ScopedBots) => {\n  bp.events.registerMiddleware({\n    name: 'kb.incoming',\n    direction: 'incoming',\n    handler: async (event: sdk.IO.IncomingEvent, next) => {\n      if (!event.hasFlag(bp.IO.WellKnownFlags.SKIP_QNA_PROCESSING) && !EVENTS_TO_IGNORE.includes(event.type)) {\n        await processEvent(event, bots[event.botId])\n        next()\n      }\n    },\n    order: 12, // must be after the NLU middleware and before the dialog middleware\n    description: 'Listen for questions and searches knowledge base'\n  })\n\n  const processEvent = async (event: sdk.IO.IncomingEvent, scopedBot: BotParams) => {\n    if (!event.nlu) {\n      return\n    }\n\n    if (scopedBot && scopedBot.loadedModel) {\n      const result = await scopedBot.loadedModel.predict(event.preview, 'fr')\n      // const predictions = await loadedModel.predict(event.preview, 'fr')\n      bp.logger.debug(\n        `\\n\\nQuestion: ${event.preview}\\n-----------------------\\n\\n` +\n          result\n            .map(\n              (x, i) => `${i}) ${x.title} [${x.confidence.toFixed(2)}]\\n${x.answerSnippet} (${x.answerSnippet.length})`\n            )\n            .join('\\n\\n')\n      )\n    }\n\n    // if (loadedModel) {\n    // }\n\n    // TODO:\n  }\n}\n"]}