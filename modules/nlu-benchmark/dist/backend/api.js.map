{"version":3,"sources":["api.ts"],"names":["spawn","require","bp","router","http","createRouterForBot","importOnnxModels","model_name","model_cache","path","join","replace","tokenizer_path","rimraf","sync","out","dl_and_export","__dirname","output","importTfModels","stdout","on","data","console","log","stderr","error","message","code","cleanPytorchCache","listAvailablesModelsName","models_path","fse","readdir","listAvailablesDatasetName","datasets_path","intent_datasets","qna_datasets","embeddings_datasets","intents","qna","embeddings","runTests","datas","models","Set","concat","apply","Object","values","checked","loaded_models","mod","DeepEmbedder","load","push","word_results","sentence_results","words","sentence","get","req","res","send","post","body","new_model_input","run_embedding_test","model","dataset","run_intent_test","run_qa_test"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/nlu-benchmark/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport { spawnSync } from 'child_process'\nimport { getAppDataPath } from 'common/utils'\nimport fse from 'fs-extra'\nimport path from 'path'\nimport rimraf from 'rimraf'\n\nimport { DeepEmbedder } from '../models/embedders/deep_onnx_embedder'\nimport { test_sentence_embeddings } from '../tests/test_sentence_embeddings'\nimport { test_word_embeddings } from '../tests/test_word_embeddings'\n\ninterface ModelsTests {\n  model_name: string\n  test_embeddings: boolean\n  test_intents: boolean\n  test_qa: boolean\n}\n\nconst { spawn } = require('child_process')\nexport default async (bp: typeof sdk) => {\n  const router = bp.http.createRouterForBot('nlu-benchmark')\n\n  const importOnnxModels = async (model_name: string) => {\n    const model_cache = path.join(\n      getAppDataPath(),\n      'cache',\n      'deep_models',\n      'embedders',\n      'onnx',\n      model_name.replace('/', '_')\n    )\n    const tokenizer_path = path.join(\n      getAppDataPath(),\n      'cache',\n      'deep_models',\n      'tokenizers',\n      model_name.replace('/', '_')\n    )\n    rimraf.sync(model_cache)\n    rimraf.sync(tokenizer_path)\n    const out = []\n    const dl_and_export = spawnSync('python', [\n      path.join(__dirname, '..', '..', 'src', 'backend', 'onnx_importer.py'),\n      '--model',\n      model_name,\n      '--tokenizer_path',\n      tokenizer_path,\n      '--framework',\n      'pt', // Can be tf for tensorflow\n      // '--opset', 11,  // The version of onnx operations sets\n      '--check-loading', // Check if exported model can be reloaded in pytorch\n      '--use-external-format', //\n      path.join(model_cache, `${model_name.replace('/', '_')}.onnx`)\n    ])\n\n    // dl_and_export.stdout.on('data', data => {\n    //   console.log(`stdout: ${data}`)\n    //   out.push(data)\n    // })\n\n    // dl_and_export.stderr.on('data', data => {\n    //   console.log(`stderr: ${data}`)\n    //   out.push(data)\n    // })\n\n    // dl_and_export.on('error', error => {\n    //   console.log(`error: ${error.message}`)\n    // })\n\n    // dl_and_export.on('close', code => {\n    //   console.log(`exporting onnx model exited with code ${code}`)\n    // })\n    return dl_and_export.output.join('\\n')\n  }\n  const importTfModels = async (model_name: string) => {\n    const model_cache = path.join(getAppDataPath(), 'cache', 'deep_models', 'embedders', 'tensorflow', model_name)\n    const dl_and_export = spawn('python', [\n      path.join(__dirname, '..', '..', 'src', 'backend', 'tf_importer.py'),\n      '-m',\n      model_name,\n      '--cache',\n      model_cache\n    ])\n\n    dl_and_export.stdout.on('data', data => {\n      console.log(`stdout: ${data}`)\n    })\n\n    dl_and_export.stderr.on('data', data => {\n      console.log(`stderr: ${data}`)\n    })\n\n    dl_and_export.on('error', error => {\n      console.log(`error: ${error.message}`)\n    })\n\n    dl_and_export.on('close', code => {\n      console.log(`exporting onnx model exited with code ${code}`)\n    })\n  }\n\n  const cleanPytorchCache = async () => {}\n\n  const listAvailablesModelsName = async () => {\n    const models_path = path.join(getAppDataPath(), 'cache', 'deep_models', 'embedders', 'onnx')\n    return fse.readdir(models_path)\n  }\n\n  const listAvailablesDatasetName = async () => {\n    const datasets_path = path.join(__dirname, '..', '..', 'src', 'datasets')\n\n    const intent_datasets: string[] = await fse.readdir(path.join(datasets_path, 'intents'))\n    const qna_datasets: string[] = await fse.readdir(path.join(datasets_path, 'qna'))\n    const embeddings_datasets: string[] = await fse.readdir(path.join(datasets_path, 'embeddings'))\n    return { intents: intent_datasets, qna: qna_datasets, embeddings: embeddings_datasets }\n  }\n\n  const runTests = async datas => {\n    console.log(datas)\n    const models = new Set([].concat.apply([], Object.values(datas.checked)))\n    console.log(models)\n    const loaded_models = []\n\n    // Embeddings\n    for (const model_name of models) {\n      const mod = new DeepEmbedder(model_name as string)\n      await mod.load()\n      loaded_models.push([model_name, mod])\n    }\n    const word_results = await test_word_embeddings(loaded_models)\n    const sentence_results = await test_sentence_embeddings(loaded_models)\n    return { words: word_results, sentence: sentence_results }\n    // Launch each test and give live results\n  }\n\n  router.get('/modelsName', async (req, res) => {\n    res.send((await listAvailablesModelsName()) as string[])\n  })\n\n  router.get('/datasetsName', async (req, res) => {\n    res.send(await listAvailablesDatasetName())\n  })\n\n  router.post('/runTests', async (req, res) => {\n    res.send(await runTests(req.body))\n  })\n\n  router.post('/importOnnxModels', async (req, res) => {\n    res.send(await importOnnxModels(req.body.new_model_input))\n  })\n  router.post('/importTfModels', async (req, res) => {\n    res.send(await importTfModels(req.body.new_model_input))\n  })\n  const run_embedding_test = async (model: any, dataset: string[]) => {}\n  const run_intent_test = async (model: any, dataset: string[]) => {}\n  const run_qa_test = async (model: any, dataset: string[]) => {}\n}\n"]}