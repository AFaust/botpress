{"version":3,"sources":["api.ts"],"names":["spawn","require","bp","router","http","createRouterForBot","export_deep_model","model_name","bp_models_cache","path","join","dl_and_export","stdout","on","data","console","log","stderr","error","message","code","getModelsName","models_path","fse","readdir","postRunTests","datas","get","req","res","send","post","body","run_embedding_test","model","dataset","run_intent_test","run_qa_test"],"mappings":";;;;;;;AAEA;;AACA;;AACA;;;;AASA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,eAAD,CAAzB;;eACe,MAAOC,EAAP,IAA0B;AACvC,QAAMC,MAAM,GAAGD,EAAE,CAACE,IAAH,CAAQC,kBAAR,CAA2B,eAA3B,CAAf;;AAEA,QAAMC,iBAAiB,GAAG,MAAOC,UAAP,IAA8B;AACtD,UAAMC,eAAe,GAAGC,cAAKC,IAAL,CAAU,4BAAV,EAA4B,aAA5B,CAAxB;;AACA,UAAMC,aAAa,GAAGX,KAAK,CAAC,QAAD,EAAW,CAAC,sBAAD,EAAyB,IAAzB,EAA+BO,UAA/B,EAA2C,SAA3C,EAAsDC,eAAtD,CAAX,CAA3B;AAEAG,IAAAA,aAAa,CAACC,MAAd,CAAqBC,EAArB,CAAwB,MAAxB,EAAgCC,IAAI,IAAI;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUF,IAAK,EAA5B;AACD,KAFD;AAIAH,IAAAA,aAAa,CAACM,MAAd,CAAqBJ,EAArB,CAAwB,MAAxB,EAAgCC,IAAI,IAAI;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAa,WAAUF,IAAK,EAA5B;AACD,KAFD;AAIAH,IAAAA,aAAa,CAACE,EAAd,CAAiB,OAAjB,EAA0BK,KAAK,IAAI;AACjCH,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASE,KAAK,CAACC,OAAQ,EAApC;AACD,KAFD;AAIAR,IAAAA,aAAa,CAACE,EAAd,CAAiB,OAAjB,EAA0BO,IAAI,IAAI;AAChCL,MAAAA,OAAO,CAACC,GAAR,CAAa,kCAAiCI,IAAK,EAAnD;AACD,KAFD;AAGD,GAnBD;;AAqBA,QAAMC,aAAa,GAAG,YAAY;AAChC,UAAMC,WAAW,GAAGb,cAAKC,IAAL,CAAU,4BAAV,EAA4B,OAA5B,EAAqC,aAArC,EAAoD,YAApD,CAApB;;AACA,WAAOa,iBAAIC,OAAJ,CAAYF,WAAZ,CAAP;AACD,GAHD;;AAKA,QAAMG,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClCX,IAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ,EADkC,CAElC;AACA;AACD,GAJD;;AAMAvB,EAAAA,MAAM,CAACwB,GAAP,CAAW,aAAX,EAA0B,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC5CA,IAAAA,GAAG,CAACC,IAAJ,EAAU,MAAMT,aAAa,EAA7B;AACD,GAFD;AAIAlB,EAAAA,MAAM,CAAC4B,IAAP,CAAY,WAAZ,EAAyB,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AAC3CA,IAAAA,GAAG,CAACC,IAAJ,EAAS,MAAML,YAAY,CAACG,GAAG,CAACI,IAAL,CAA3B;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,OAAOC,KAAP,EAAmBC,OAAnB,KAAyC,CAAE,CAAtE;;AACA,QAAMC,eAAe,GAAG,OAAOF,KAAP,EAAmBC,OAAnB,KAAyC,CAAE,CAAnE;;AACA,QAAME,WAAW,GAAG,OAAOH,KAAP,EAAmBC,OAAnB,KAAyC,CAAE,CAA/D;AACD,C","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/nlu-benchmark/src/backend","sourcesContent":["import { model } from '@tensorflow/tfjs-node'\nimport * as sdk from 'botpress/sdk'\nimport { getAppDataPath } from 'common/utils'\nimport fse from 'fs-extra'\nimport path from 'path'\n\ninterface Models {\n  model_name: string\n  test_embeddings: boolean\n  test_intents: boolean\n  test_qa: boolean\n}\n\nconst { spawn } = require('child_process')\nexport default async (bp: typeof sdk) => {\n  const router = bp.http.createRouterForBot('nlu-benchmark')\n\n  const export_deep_model = async (model_name: string) => {\n    const bp_models_cache = path.join(getAppDataPath(), 'deep_models')\n    const dl_and_export = spawn('python', ['./python_exporter.py', '-m', model_name, '--cache', bp_models_cache])\n\n    dl_and_export.stdout.on('data', data => {\n      console.log(`stdout: ${data}`)\n    })\n\n    dl_and_export.stderr.on('data', data => {\n      console.log(`stderr: ${data}`)\n    })\n\n    dl_and_export.on('error', error => {\n      console.log(`error: ${error.message}`)\n    })\n\n    dl_and_export.on('close', code => {\n      console.log(`child process exited with code ${code}`)\n    })\n  }\n\n  const getModelsName = async () => {\n    const models_path = path.join(getAppDataPath(), 'cache', 'deep_models', 'tensorflow')\n    return fse.readdir(models_path)\n  }\n\n  const postRunTests = async datas => {\n    console.log(datas)\n    // Load models returned by the checkbox\n    // Launch each test and give live results\n  }\n\n  router.get('/modelsName', async (req, res) => {\n    res.send((await getModelsName()) as string[])\n  })\n\n  router.post('/runTests', async (req, res) => {\n    res.send(await postRunTests(req.body))\n  })\n\n  const run_embedding_test = async (model: any, dataset: string[]) => {}\n  const run_intent_test = async (model: any, dataset: string[]) => {}\n  const run_qa_test = async (model: any, dataset: string[]) => {}\n}\n"]}