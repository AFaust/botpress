{"version":3,"sources":["db.ts"],"names":["padDigits","number","digits","Array","Math","max","String","length","join","BroadcastDb","constructor","bp","knex","database","initialize","createTableIfNotExists","table","increments","primary","string","timestamp","boolean","integer","then","references","onDelete","unsigned","notNullable","inTable","addSchedule","botId","date","time","timezone","content","type","filters","dateTime","ts","undefined","Date","toDate","row","date_time","format","text","outboxed","errored","total_count","sent_count","created_on","now","JSON","stringify","insert","updateSchedule","id","where","bool","false","update","deleteSchedule","delete","scheduleId","listSchedules","getBroadcastSchedulesByTime","upcomingFixedTime","upcomingVariableTime","andWhere","whereNotNull","orWhere","whereNull","getUsersTimezone","attrs","select","timezones","map","attributes","Set","setBroadcastOutbox","schedule","tz","initialTz","sign","Number","abs","relTime","adjustedTime","sql","raw","getOutboxCount","result","count","first","qty","parseInt","updateTotalCount","true","getBroadcastOutbox","whereRaw","limit","deleteBroadcastOutbox","userId","deleteBroadcastOutboxById","increaseBroadcastSentCount","updateErrorField"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/broadcast/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\nimport moment from 'moment'\n\nimport { Broadcast, Schedule, ScheduleRow } from './typings'\n\nfunction padDigits(number, digits) {\n  return Array(Math.max(digits - String(number).length + 1, 0)).join('0') + number\n}\n\nexport default class BroadcastDb {\n  knex: sdk.KnexExtended\n\n  constructor(bp: typeof sdk) {\n    this.knex = bp.database\n  }\n\n  initialize() {\n    return this.knex\n      .createTableIfNotExists('broadcast_schedules', table => {\n        table.increments('id').primary()\n        table.string('botId')\n        table.string('date_time')\n        table.timestamp('ts')\n        table.string('text')\n        table.string('type')\n        table.boolean('outboxed')\n        table.boolean('errored')\n        table.integer('total_count')\n        table.integer('sent_count')\n        table.timestamp('created_on')\n        table.string('filters')\n      })\n      .then(() => {\n        return this.knex.createTableIfNotExists('broadcast_outbox', table => {\n          table\n            .integer('scheduleId')\n            .references('broadcast_schedules.id')\n            .onDelete('CASCADE')\n          table\n            .integer('userId')\n            .unsigned()\n            .notNullable()\n            .references('id')\n            .inTable('srv_channel_users')\n          table.primary(['scheduleId', 'userId'])\n          table.string('botId')\n          table.timestamp('ts')\n        })\n      })\n  }\n\n  async addSchedule({ botId, date, time, timezone, content, type, filters }: Schedule): Promise<ScheduleRow> {\n    const dateTime = date + ' ' + time\n    let ts = undefined\n\n    if (timezone) {\n      ts = moment(new Date(dateTime + ' ' + timezone)).toDate()\n    }\n\n    const row: ScheduleRow = {\n      botId,\n      date_time: dateTime,\n      ts: ts ? this.knex.date.format(ts) : undefined,\n      text: content,\n      type: type,\n      outboxed: false,\n      errored: false,\n      total_count: 0,\n      sent_count: 0,\n      created_on: this.knex.date.now(),\n      filters: JSON.stringify(filters)\n    }\n\n    return this.knex('broadcast_schedules').insert(row)\n  }\n\n  async updateSchedule({ id, botId, date, time, timezone, content, type, filters }: Schedule): Promise<void> {\n    const dateTime = date + ' ' + time\n    let ts = undefined\n    if (timezone) {\n      ts = moment(new Date(dateTime + ' ' + timezone)).toDate()\n    }\n\n    const row: Partial<ScheduleRow> = {\n      date_time: dateTime,\n      ts: ts ? this.knex.date.format(ts) : undefined,\n      text: content,\n      type: type,\n      filters: JSON.stringify(filters)\n    }\n\n    await this.knex('broadcast_schedules')\n      .where({ id, botId, outboxed: this.knex.bool.false() })\n      .update(row)\n  }\n\n  async deleteSchedule(id: number): Promise<void> {\n    await this.knex('broadcast_schedules')\n      .where({ id })\n      .delete()\n\n    await this.knex('broadcast_outbox')\n      .where({ scheduleId: id })\n      .delete()\n  }\n\n  async listSchedules(botId: string): Promise<ScheduleRow[]> {\n    return this.knex('broadcast_schedules').where({ botId })\n  }\n\n  async getBroadcastSchedulesByTime(botId: string, upcomingFixedTime, upcomingVariableTime): Promise<Schedule[]> {\n    return this.knex('broadcast_schedules')\n      .where({\n        botId,\n        outboxed: this.knex.bool.false()\n      })\n      .andWhere(function() {\n        this.where(function() {\n          this.whereNotNull('ts').andWhere(upcomingFixedTime)\n        }).orWhere(function() {\n          this.whereNull('ts').andWhere(upcomingVariableTime)\n        })\n      })\n  }\n\n  async getUsersTimezone() {\n    const attrs = await this.knex('srv_channel_users').select('attributes')\n    const timezones = attrs.map(({ attributes: { timezone } }) => timezone)\n\n    return [...new Set(timezones)]\n  }\n\n  setBroadcastOutbox(botId, schedule, tz) {\n    const initialTz = tz\n    const sign = Number(tz) >= 0 ? '+' : '-'\n    tz = padDigits(Math.abs(Number(tz)), 2)\n    const relTime = moment(`${schedule['date_time']}${sign}${tz}`, 'YYYY-MM-DD HH:mmZ').toDate()\n    const adjustedTime = this.knex.date.format(schedule['ts'] ? schedule['ts'] : relTime)\n    // const whereClause = _.isNil(initialTz)\n    //  ? 'where attributes->timezone IS NULL'\n    //  : 'where attributes->>timezone = :initialTz'\n\n    const sql = `insert into broadcast_outbox (\"userId\", \"scheduleId\", \"botId\", \"ts\")\n      select userId, :scheduleId, :botId, :adjustedTime\n      from (\n        select id as userId\n        from srv_channel_users\n      ) as q1`\n\n    return this.knex\n      .raw(sql, {\n        scheduleId: schedule['id'],\n        adjustedTime,\n        initialTz,\n        botId\n      })\n      .then()\n  }\n\n  async getOutboxCount(botId: string, schedule: Schedule): Promise<number> {\n    const result = await this.knex('broadcast_outbox')\n      .where({ botId, scheduleId: schedule.id })\n      .count<Record<string, number>>('* as qty')\n      .first()\n      .then(result => result!.qty)\n\n    return typeof result === 'number' ? result : parseInt(result)\n  }\n\n  updateTotalCount(schedule: Schedule, count: number) {\n    return this.knex('broadcast_schedules')\n      .where({ id: schedule.id })\n      .update({ outboxed: this.knex.bool.true(), total_count: count })\n  }\n\n  async getBroadcastOutbox(botId: string): Promise<Broadcast[]> {\n    return this.knex('broadcast_outbox')\n      .whereRaw('broadcast_outbox.ts < ?', [this.knex.date.now()])\n      .andWhere('broadcast_outbox.botId', botId)\n      .join('srv_channel_users', 'srv_channel_users.id', 'broadcast_outbox.userId')\n      .join('broadcast_schedules', 'scheduleId', 'broadcast_schedules.id')\n      .limit(1000)\n      .select([\n        'srv_channel_users.user_id as userId',\n        'srv_channel_users.channel as platform',\n        'broadcast_schedules.text as text',\n        'broadcast_schedules.type as type',\n        'broadcast_schedules.id as scheduleId',\n        'broadcast_schedules.filters as filters',\n        'broadcast_outbox.ts as sendTime',\n        'broadcast_outbox.userId as scheduleUser'\n      ])\n  }\n\n  async deleteBroadcastOutbox(userId: string, scheduleId: number): Promise<void> {\n    return this.knex('broadcast_outbox')\n      .where({ userId, scheduleId })\n      .delete()\n  }\n\n  async deleteBroadcastOutboxById(scheduleId: number): Promise<void> {\n    return this.knex('broadcast_outbox')\n      .where({ scheduleId })\n      .delete()\n  }\n\n  async increaseBroadcastSentCount(id: number): Promise<void> {\n    return this.knex('broadcast_schedules')\n      .where({ id })\n      .update({ sent_count: this.knex.raw('sent_count + 1') })\n  }\n\n  async updateErrorField(scheduleId: number): Promise<void> {\n    return this.knex('broadcast_schedules')\n      .where({ id: scheduleId })\n      .update({ errored: this.knex.bool.true() })\n  }\n}\n"]}