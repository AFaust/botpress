{"version":3,"sources":["api.ts"],"names":["bp","db","asyncMiddleware","logger","router","http","createRouterForBot","get","req","res","schedules","listSchedules","params","botId","broadcasts","map","row","date","time","date_time","split","progress","total_count","sent_count","knex","bool","parse","outboxed","type","content","text","errored","userTimezone","ts","id","filteringConditions","filters","JSON","send","post","timezone","body","addSchedule","sendStatus","updateSchedule","deleteSchedule"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/broadcast/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport { asyncMiddleware as asyncMw } from 'common/http'\n\nimport Database from './db'\n\nexport default async (bp: typeof sdk, db: Database) => {\n  const asyncMiddleware = asyncMw(bp.logger)\n  const router = bp.http.createRouterForBot('broadcast')\n\n  router.get(\n    '/',\n    asyncMiddleware(async (req, res) => {\n      const schedules = await db.listSchedules(req.params.botId)\n      const broadcasts = schedules.map(row => {\n        const [date, time] = row.date_time.split(' ')\n        const progress = row.total_count ? row.sent_count / row.total_count : db.knex.bool.parse(row.outboxed) ? 1 : 0\n\n        return {\n          type: row.type,\n          content: row.text,\n          outboxed: db.knex.bool.parse(row.outboxed),\n          errored: db.knex.bool.parse(row.errored),\n          progress: progress,\n          userTimezone: !row.ts,\n          date: date,\n          time: time,\n          id: row.id,\n          filteringConditions: row.filters && JSON.parse(row.filters)\n        }\n      })\n      res.send(broadcasts)\n    })\n  )\n\n  router.post(\n    '/create',\n    asyncMiddleware(async (req, res) => {\n      const { date, time, timezone, content, type, filters } = req.body\n      const { botId } = req.params\n\n      await db.addSchedule({ botId, date, time, timezone, content, type, filters })\n      res.sendStatus(200)\n    })\n  )\n\n  router.post(\n    '/update',\n    asyncMiddleware(async (req, res) => {\n      const { id, date, time, timezone, content, type, filters } = req.body\n      const { botId } = req.params\n\n      await db.updateSchedule({ id, date, time, timezone, content, type, filters, botId })\n      res.sendStatus(200)\n    })\n  )\n\n  router.post(\n    '/delete/:id',\n    asyncMiddleware(async (req, res) => {\n      await db.deleteSchedule(req.params.id)\n      res.sendStatus(200)\n    })\n  )\n}\n"]}