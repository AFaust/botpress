{"version":3,"sources":["daemon.ts"],"names":["INTERVAL_BASE","SCHEDULE_TO_OUTBOX_INTERVAL","SEND_BROADCAST_INTERVAL","botId","bp","db","emitChanged","_","throttle","realtime","sendPayload","RealTimePayload","forAdmins","_sendBroadcast","Promise","method","row","dropPromise","resolve","filters","mapSeries","JSON","parse","filter","fnBody","trim","test","fn","Function","userId","platform","then","values","some","v","isBoolean","logger","warn","drop","debug","scheduleId","botInfo","bots","getBotById","user","users","getOrCreateUser","language","defaultLanguage","result","attributes","event","state","eventDestination","channel","target","payloads","cms","renderElement","text","payload","events","sendEvent","IO","Event","direction","type","get","trySendBroadcast","broadcast","scheduleUser","max_tries","interval","backoff","deleteBroadcastOutbox","increaseBroadcastSentCount","handleFailedSending","err","error","message","notifications","create","level","updateErrorField","deleteBroadcastOutboxById","scheduleToOutbox","schedulingLock","distributed","acquireLock","inFiveMinutes","add","toDate","endOfDay","upcomingFixedTime","knex","date","isAfter","upcomingVariableTime","schedules","getBroadcastSchedulesByTime","map","schedule","timezones","getUsersTimezone","tz","setBroadcastOutbox","count","getOutboxCount","updateTotalCount","info","id","length","unlock","sendBroadcasts","sendingLock","broadcasts","getBroadcastOutbox","abort","setInterval","bind","undefined"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;AAKA,MAAMA,aAAa,GAAG,KAAK,IAA3B;AACA,MAAMC,2BAA2B,GAAGD,aAAa,GAAG,CAApD;AACA,MAAME,uBAAuB,GAAGF,aAAa,GAAG,CAAhD;;eAEe,OAAOG,KAAP,EAAsBC,EAAtB,EAAsCC,EAAtC,KAAuD;AACpE,QAAMC,WAAW,GAAGC,gBAAEC,QAAF,CAAW,MAAM;AACnCJ,IAAAA,EAAE,CAACK,QAAH,CAAYC,WAAZ,CAAwBN,EAAE,CAACO,eAAH,CAAmBC,SAAnB,CAA6B,mBAA7B,EAAkD,EAAlD,CAAxB;AACD,GAFmB,EAEjB,IAFiB,CAApB;;AAIA,QAAMC,cAAc,GAAGC,kBAAQC,MAAR,CAAe,CAACZ,KAAD,EAAgBa,GAAhB,KAAmC;AACvE,QAAIC,WAAW,GAAGH,kBAAQI,OAAR,CAAgB,KAAhB,CAAlB;;AAEA,QAAIF,GAAG,CAACG,OAAR,EAAiB;AACfF,MAAAA,WAAW,GAAGH,kBAAQM,SAAR,CAAkBC,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACG,OAAf,CAAlB,EAA4CI,MAAD,IAAoB;AAC3E,YAAIC,MAAM,GAAGD,MAAM,CAACE,IAAP,EAAb;;AACA,YAAI,CAAC,YAAYC,IAAZ,CAAiBF,MAAjB,CAAL,EAA+B;AAC7BA,UAAAA,MAAM,GAAG,YAAYA,MAArB;AACD;;AAED,cAAMG,EAAE,GAAG,IAAIC,QAAJ,CAAa,IAAb,EAAmB,QAAnB,EAA6B,SAA7B,EAAwCJ,MAAxC,CAAX;AACA,eAAO,CAACG,EAAE,CAACvB,EAAD,EAAKY,GAAG,CAACa,MAAT,EAAiBb,GAAG,CAACc,QAArB,CAAV;AACD,OARa,EAQXC,IARW,CAQNC,MAAM,IAAI;AAChB,eAAOzB,gBAAE0B,IAAF,CAAOD,MAAP,EAAeE,CAAC,IAAI;AACzB,cAAI,CAAC3B,gBAAE4B,SAAF,CAAYD,CAAZ,CAAL,EAAqB;AACnB9B,YAAAA,EAAE,CAACgC,MAAH,CAAUC,IAAV,CAAe,qCAAqC,4CAApD;AACD;;AAED,iBAAO,OAAOH,CAAP,KAAa,WAAb,IAA4BA,CAAC,KAAK,IAAzC;AACD,SANM,CAAP;AAOD,OAhBa,CAAd;AAiBD;;AAED,WAAOjB,WAAW,CAACc,IAAZ,CAAiB,MAAMO,IAAN,IAAc;AACpC,UAAIA,IAAJ,EAAU;AACRlC,QAAAA,EAAE,CAACgC,MAAH,CAAUG,KAAV,CAAiB,iBAAgBvB,GAAG,CAACwB,UAAW,aAAYxB,GAAG,CAACa,MAAO,oBAAvE;AACA;AACD;;AAED,YAAMY,OAAO,GAAG,MAAMrC,EAAE,CAACsC,IAAH,CAAQC,UAAR,CAAmBxC,KAAnB,CAAtB;AACA,YAAMyC,IAAI,GAAG,MAAMxC,EAAE,CAACyC,KAAH,CAASC,eAAT,CAAyB9B,GAAG,CAACc,QAA7B,EAAuCd,GAAG,CAACa,MAA3C,EAAmD1B,KAAnD,CAAnB;AACA,UAAI4C,QAAQ,GAAGN,OAAO,CAACO,eAAvB;;AACA,UAAIJ,IAAI,CAAEK,MAAN,CAAcC,UAAd,CAA0BH,QAA9B,EAAwC;AACtCA,QAAAA,QAAQ,GAAGH,IAAI,CAACK,MAAL,CAAYC,UAAZ,CAAuBH,QAAlC;AACD;;AAED,YAAMI,KAAK,GAAG;AAAEC,QAAAA,KAAK,EAAE;AAAER,UAAAA,IAAI,EAAE;AAAEG,YAAAA,QAAQ,EAAEA;AAAZ;AAAR;AAAT,OAAd;AACA,YAAMM,gBAAgB,GAAG;AAAEC,QAAAA,OAAO,EAAEtC,GAAG,CAACc,QAAf;AAAyB3B,QAAAA,KAAzB;AAAgCoD,QAAAA,MAAM,EAAEvC,GAAG,CAACa;AAA5C,OAAzB;AACA,YAAM2B,QAAQ,GAAG,MAAMpD,EAAE,CAACqD,GAAH,CAAOC,aAAP,CAAsB,IAAG1C,GAAG,CAAC2C,IAAK,EAAlC,EAAqC;AAAER,QAAAA;AAAF,OAArC,EAAgDE,gBAAhD,CAAvB;;AAEA,WAAK,MAAMO,OAAX,IAAsBJ,QAAtB,EAAgC;AAC9B,cAAMpD,EAAE,CAACyD,MAAH,CAAUC,SAAV,CACJ1D,EAAE,CAAC2D,EAAH,CAAMC,KAAN,CAAY,EACV,GAAGX,gBADO;AAEVY,UAAAA,SAAS,EAAE,UAFD;AAGVC,UAAAA,IAAI,EAAE3D,gBAAE4D,GAAF,CAAMP,OAAN,EAAe,MAAf,EAAuB,SAAvB,CAHI;AAIVA,UAAAA;AAJU,SAAZ,CADI,CAAN;AAQD;AACF,KA3BM,CAAP;AA4BD,GAnDsB,CAAvB;;AAqDA,QAAMQ,gBAAgB,GAAG,MAAOC,SAAP,IAAgC;AACvD,UAAM;AAAE7B,MAAAA,UAAF;AAAc8B,MAAAA;AAAd,QAA+BD,SAArC;AAEA,UAAM,4BAAM,MAAMxD,cAAc,CAACV,KAAD,EAAQkE,SAAR,CAA1B,EAA8C;AAClDE,MAAAA,SAAS,EAAE,CADuC;AAElDC,MAAAA,QAAQ,EAAE,IAFwC;AAGlDC,MAAAA,OAAO,EAAE;AAHyC,KAA9C,CAAN;AAMA,UAAMpE,EAAE,CAACqE,qBAAH,CAAyBJ,YAAzB,EAAuC9B,UAAvC,CAAN;AACA,UAAMnC,EAAE,CAACsE,0BAAH,CAA8BnC,UAA9B,CAAN;AACD,GAXD;;AAaA,QAAMoC,mBAAmB,GAAG,OAAOC,GAAP,EAAmBrC,UAAnB,KAA0C;AACpEpC,IAAAA,EAAE,CAACgC,MAAH,CAAU0C,KAAV,CAAiB,cAAatC,UAAW,wCAAuCqC,GAAG,CAACE,OAAQ,EAA5F;AAEA,UAAM3E,EAAE,CAAC4E,aAAH,CAAiBC,MAAjB,CAAwB9E,KAAxB,EAA+B;AACnCA,MAAAA,KADmC;AAEnC+E,MAAAA,KAAK,EAAE,OAF4B;AAGnCH,MAAAA,OAAO,EAAE,gBAAgBvC,UAAhB,GAA6B,UAA7B,GAA0C;AAHhB,KAA/B,CAAN;AAMA,UAAMnC,EAAE,CAAC8E,gBAAH,CAAoB3C,UAApB,CAAN;AACA,UAAMnC,EAAE,CAAC+E,yBAAH,CAA6B5C,UAA7B,CAAN;AACD,GAXD;;AAaA,QAAM6C,gBAAgB,GAAG,MAAOlF,KAAP,IAAyB;AAChD,UAAMmF,cAAc,GAAG,MAAMlF,EAAE,CAACmF,WAAH,CAAeC,WAAf,CAA4B,6BAA4BrF,KAAM,EAA9D,EAAiE,iBAAG,IAAH,CAAjE,CAA7B;;AACA,QAAI,CAACmF,cAAL,EAAqB;AACnB;AACD;;AAED,QAAI;AACF,YAAMG,aAAa,GAAG,uBACnBC,GADmB,CACf,CADe,EACZ,SADY,EAEnBC,MAFmB,EAAtB;AAGA,YAAMC,QAAQ,GAAG,qBAAOH,aAAP,EACdC,GADc,CACV,EADU,EACN,OADM,EAEdC,MAFc,EAAjB;AAIA,YAAME,iBAAiB,GAAGxF,EAAE,CAACyF,IAAH,CAAQC,IAAR,CAAaC,OAAb,CAAqBP,aAArB,EAAoC,IAApC,CAA1B;AACA,YAAMQ,oBAAoB,GAAG5F,EAAE,CAACyF,IAAH,CAAQC,IAAR,CAAaC,OAAb,CAAqBJ,QAArB,EAA+B,WAA/B,CAA7B;AAEA,YAAMM,SAAS,GAAG,MAAM7F,EAAE,CAAC8F,2BAAH,CAA+BhG,KAA/B,EAAsC0F,iBAAtC,EAAyDI,oBAAzD,CAAxB;AAEA,YAAMnF,kBAAQsF,GAAR,CAAYF,SAAZ,EAAuB,MAAMG,QAAN,IAAkB;AAC7C,cAAMC,SAAS,GAAG,MAAMjG,EAAE,CAACkG,gBAAH,EAAxB;AAEA,cAAMzF,kBAAQM,SAAR,CAAkBkF,SAAlB,EAA6B,MAAME,EAAN,IAAY;AAC7C,gBAAMnG,EAAE,CAACoG,kBAAH,CAAsBtG,KAAtB,EAA6BkG,QAA7B,EAAuCG,EAAvC,CAAN;AAEA,gBAAME,KAAK,GAAG,MAAMrG,EAAE,CAACsG,cAAH,CAAkBxG,KAAlB,EAAyBkG,QAAzB,CAApB;AACA,gBAAMhG,EAAE,CAACuG,gBAAH,CAAoBP,QAApB,EAA8BK,KAA9B,CAAN;AAEAtG,UAAAA,EAAE,CAACgC,MAAH,CAAUyE,IAAV,CAAe,0BAA0BR,QAAQ,CAACS,EAAlD,EAAsD,QAAQJ,KAAR,GAAgB,YAAtE;;AAEA,cAAIL,QAAQ,CAAClF,OAAT,IAAoBE,IAAI,CAACC,KAAL,CAAW+E,QAAQ,CAAClF,OAApB,EAA6B4F,MAA7B,GAAsC,CAA9D,EAAiE;AAC/D3G,YAAAA,EAAE,CAACgC,MAAH,CAAUyE,IAAV,CAAgB,+BAA8BR,QAAQ,CAACS,EAAG,wCAA1D;AACD;;AAEDxG,UAAAA,WAAW;AACZ,SAbK,CAAN;AAcD,OAjBK,CAAN;AAkBD,KA/BD,SA+BU;AACR,YAAMgF,cAAc,CAAC0B,MAAf,EAAN;AACD;AACF,GAxCD;;AA0CA,QAAMC,cAAc,GAAG,MAAO9G,KAAP,IAAyB;AAC9C,QAAI;AACF,YAAM+G,WAAW,GAAG,MAAM9G,EAAE,CAACmF,WAAH,CAAeC,WAAf,CAA4B,0BAAyBrF,KAAM,EAA3D,EAA8D,iBAAG,IAAH,CAA9D,CAA1B;;AACA,UAAI,CAAC+G,WAAL,EAAkB;AAChB;AACD;;AAED,UAAI;AACF,cAAMC,UAAU,GAAG,MAAM9G,EAAE,CAAC+G,kBAAH,CAAsBjH,KAAtB,CAAzB;AACA,YAAIkH,KAAK,GAAG,KAAZ;AAEA,cAAMvG,kBAAQM,SAAR,CAAkB+F,UAAlB,EAA8B,MAAO9C,SAAP,IAAgC;AAClE,cAAIgD,KAAJ,EAAW;AACT;AACD;;AAED,cAAI;AACF,kBAAMjD,gBAAgB,CAACC,SAAD,CAAtB;AACD,WAFD,CAEE,OAAOQ,GAAP,EAAY;AACZwC,YAAAA,KAAK,GAAG,IAAR;AAEA,kBAAMzC,mBAAmB,CAACC,GAAD,EAAMR,SAAS,CAAC7B,UAAhB,CAAzB;AACD,WAND,SAMU;AACRlC,YAAAA,WAAW;AACZ;AACF,SAdK,CAAN;AAeD,OAnBD,SAmBU;AACR,cAAM4G,WAAW,CAACF,MAAZ,EAAN;AACD;AACF,KA5BD,CA4BE,OAAOlC,KAAP,EAAc;AACd1E,MAAAA,EAAE,CAACgC,MAAH,CAAU0C,KAAV,CAAgB,2BAAhB,EAA6CA,KAAK,CAACC,OAAnD;AACD;AACF,GAhCD;;AAkCAuC,EAAAA,WAAW,CAACjC,gBAAgB,CAACkC,IAAjB,CAAsBC,SAAtB,EAAiCrH,KAAjC,CAAD,EAA0CF,2BAA1C,CAAX;AACAqH,EAAAA,WAAW,CAACL,cAAc,CAACM,IAAf,CAAoBC,SAApB,EAA+BrH,KAA/B,CAAD,EAAwCD,uBAAxC,CAAX;AACD,C","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/broadcast/src/backend","sourcesContent":["import { Promise } from 'bluebird'\nimport retry from 'bluebird-retry'\nimport * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport ms from 'ms'\n\nimport Database from './db'\nimport { Broadcast } from './typings'\n\nconst INTERVAL_BASE = 10 * 1000\nconst SCHEDULE_TO_OUTBOX_INTERVAL = INTERVAL_BASE * 1\nconst SEND_BROADCAST_INTERVAL = INTERVAL_BASE * 1\n\nexport default async (botId: string, bp: typeof sdk, db: Database) => {\n  const emitChanged = _.throttle(() => {\n    bp.realtime.sendPayload(bp.RealTimePayload.forAdmins('broadcast.changed', {}))\n  }, 1000)\n\n  const _sendBroadcast = Promise.method((botId: string, row: Broadcast) => {\n    let dropPromise = Promise.resolve(false)\n\n    if (row.filters) {\n      dropPromise = Promise.mapSeries(JSON.parse(row.filters), (filter: string) => {\n        let fnBody = filter.trim()\n        if (!/^return /i.test(fnBody)) {\n          fnBody = 'return ' + fnBody\n        }\n\n        const fn = new Function('bp', 'userId', 'channel', fnBody)\n        return !fn(bp, row.userId, row.platform)\n      }).then(values => {\n        return _.some(values, v => {\n          if (!_.isBoolean(v)) {\n            bp.logger.warn('Filter returned something other ' + 'than a boolean (or a Promise of a boolean)')\n          }\n\n          return typeof v !== 'undefined' && v !== null\n        })\n      })\n    }\n\n    return dropPromise.then(async drop => {\n      if (drop) {\n        bp.logger.debug(`Drop sending #${row.scheduleId} to user: ${row.userId}. Reason = Filters`)\n        return\n      }\n\n      const botInfo = await bp.bots.getBotById(botId)\n      const user = await bp.users.getOrCreateUser(row.platform, row.userId, botId)\n      let language = botInfo.defaultLanguage\n      if (user!.result!.attributes!.language) {\n        language = user.result.attributes.language\n      }\n\n      const event = { state: { user: { language: language } } }\n      const eventDestination = { channel: row.platform, botId, target: row.userId }\n      const payloads = await bp.cms.renderElement(`!${row.text}`, { event }, eventDestination)\n\n      for (const payload of payloads) {\n        await bp.events.sendEvent(\n          bp.IO.Event({\n            ...eventDestination,\n            direction: 'outgoing',\n            type: _.get(payload, 'type', 'default'),\n            payload\n          })\n        )\n      }\n    })\n  })\n\n  const trySendBroadcast = async (broadcast: Broadcast) => {\n    const { scheduleId, scheduleUser } = broadcast\n\n    await retry(() => _sendBroadcast(botId, broadcast), {\n      max_tries: 3,\n      interval: 1000,\n      backoff: 3\n    })\n\n    await db.deleteBroadcastOutbox(scheduleUser, scheduleId)\n    await db.increaseBroadcastSentCount(scheduleId)\n  }\n\n  const handleFailedSending = async (err: Error, scheduleId: number) => {\n    bp.logger.error(`Broadcast #${scheduleId}' failed. Broadcast aborted. Reason: ${err.message}`)\n\n    await bp.notifications.create(botId, {\n      botId,\n      level: 'error',\n      message: 'Broadcast #' + scheduleId + ' failed.' + ' Please check logs for the reason why.'\n    })\n\n    await db.updateErrorField(scheduleId)\n    await db.deleteBroadcastOutboxById(scheduleId)\n  }\n\n  const scheduleToOutbox = async (botId: string) => {\n    const schedulingLock = await bp.distributed.acquireLock(`broadcast/lock/scheduling_${botId}`, ms('5m'))\n    if (!schedulingLock) {\n      return\n    }\n\n    try {\n      const inFiveMinutes = moment()\n        .add(5, 'minutes')\n        .toDate()\n      const endOfDay = moment(inFiveMinutes)\n        .add(14, 'hours')\n        .toDate()\n\n      const upcomingFixedTime = db.knex.date.isAfter(inFiveMinutes, 'ts')\n      const upcomingVariableTime = db.knex.date.isAfter(endOfDay, 'date_time')\n\n      const schedules = await db.getBroadcastSchedulesByTime(botId, upcomingFixedTime, upcomingVariableTime)\n\n      await Promise.map(schedules, async schedule => {\n        const timezones = await db.getUsersTimezone()\n\n        await Promise.mapSeries(timezones, async tz => {\n          await db.setBroadcastOutbox(botId, schedule, tz)\n\n          const count = await db.getOutboxCount(botId, schedule)\n          await db.updateTotalCount(schedule, count)\n\n          bp.logger.info('Scheduled broadcast #' + schedule.id, '. [' + count + ' messages]')\n\n          if (schedule.filters && JSON.parse(schedule.filters).length > 0) {\n            bp.logger.info(`Filters found on broadcast #${schedule.id}. Filters are applied at sending time.`)\n          }\n\n          emitChanged()\n        })\n      })\n    } finally {\n      await schedulingLock.unlock()\n    }\n  }\n\n  const sendBroadcasts = async (botId: string) => {\n    try {\n      const sendingLock = await bp.distributed.acquireLock(`broadcast/lock/sending_${botId}`, ms('5m'))\n      if (!sendingLock) {\n        return\n      }\n\n      try {\n        const broadcasts = await db.getBroadcastOutbox(botId)\n        let abort = false\n\n        await Promise.mapSeries(broadcasts, async (broadcast: Broadcast) => {\n          if (abort) {\n            return\n          }\n\n          try {\n            await trySendBroadcast(broadcast)\n          } catch (err) {\n            abort = true\n\n            await handleFailedSending(err, broadcast.scheduleId)\n          } finally {\n            emitChanged()\n          }\n        })\n      } finally {\n        await sendingLock.unlock()\n      }\n    } catch (error) {\n      bp.logger.error('Broadcast sending error: ', error.message)\n    }\n  }\n\n  setInterval(scheduleToOutbox.bind(undefined, botId), SCHEDULE_TO_OUTBOX_INTERVAL)\n  setInterval(sendBroadcasts.bind(undefined, botId), SEND_BROADCAST_INTERVAL)\n}\n"]}