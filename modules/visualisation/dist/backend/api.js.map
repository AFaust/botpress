{"version":3,"sources":["api.ts"],"names":["bp","state","longJobsPool","router","http","createRouterForBot","glob_res","get","req","res","botId","params","newAxiosConfig","getAxiosConfigForBot","localUrl","predictor","axiosConfig","jobId","send","status","data","undefined","error","cm","e","console","log","CM2","ConfusionMatrix","fromLabels","map","o","gt","pred","CM","Matrix","matrix","divColumnVector","row","_","sum","to2DArray","plotlyMatrixData","x","labels","y","z","type","layout","title","annotations","xaxis","ticks","side","yaxis","tickangle","ticksuffix","width","height","autosize","i","length","j","result","xref","yref","text","font","family","size","color","showarrow","push"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/visualisation/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport _ from 'lodash'\nimport ConfusionMatrix from 'ml-confusion-matrix'\nimport { Matrix } from 'ml-matrix'\nimport nanoid from 'nanoid'\n\nimport { getTrainTestDatas } from '../tools/data_loader'\nimport {\n  computeConfusionMatrix,\n  computeEmbeddingSimilarity,\n  computeIntentSimilarity,\n  computeOutliers,\n  computeScatterEmbeddings,\n  computeTsneScatterEmbeddings\n} from '../tools/visualisation'\n\nimport { VisuState } from './typings'\n\nexport default async (bp: typeof sdk, state: VisuState) => {\n  const longJobsPool = {}\n  const router = bp.http.createRouterForBot('new_qna')\n  const glob_res = []\n\n  router.get('/confusionMatrix', async (req, res) => {\n    const botId = req.params.botId\n    const newAxiosConfig = await bp.http.getAxiosConfigForBot(botId, { localUrl: true })\n    state[botId].predictor.axiosConfig = newAxiosConfig\n    state[botId].axiosConfig = newAxiosConfig\n    const jobId = nanoid()\n    res.send(jobId)\n    longJobsPool[jobId] = { status: 'computing', data: undefined, error: undefined, cm: true }\n    try {\n      longJobsPool[jobId].data = await computeConfusionMatrix(state[botId], glob_res)\n      longJobsPool[jobId].status = 'done'\n    } catch (e) {\n      console.log('Erreur test paris: ', e)\n      longJobsPool[jobId].status = 'crashed'\n      longJobsPool[jobId].error = e.data\n    }\n  })\n  router.get('/loadDatas', async (req, res) => {\n    res.send(await getTrainTestDatas(state[req.params.botId]))\n  })\n\n  router.get('/similarityEmbeddings', async (req, res) => {\n    res.send(await computeEmbeddingSimilarity(state[req.params.botId]))\n  })\n\n  router.get('/similarityIntents', async (req, res) => {\n    res.send(await computeIntentSimilarity(state[req.params.botId]))\n  })\n\n  router.get('/scatterTsneEmbeddings', async (req, res) => {\n    res.send(await computeTsneScatterEmbeddings(state[req.params.botId]))\n  })\n\n  router.get('/scatterEmbeddings', async (req, res) => {\n    res.send(await computeScatterEmbeddings(state[req.params.botId]))\n  })\n\n  router.get('/computeOutliers', async (req, res) => {\n    res.send(computeOutliers(state[req.params.botId]))\n  })\n\n  router.get('/long-jobs-status/:jobId', async (req, res) => {\n    const newAxiosConfig = await bp.http.getAxiosConfigForBot(req.params.botId, { localUrl: true })\n    state[req.params.botId].predictor.axiosConfig = newAxiosConfig\n    state[req.params.botId].axiosConfig = newAxiosConfig\n    if (longJobsPool[req.params.jobId].cm) {\n      const CM2 = ConfusionMatrix.fromLabels(\n        glob_res.map(o => o.gt),\n        glob_res.map(o => o.pred)\n      )\n      // Normalize the confusion matrix\n      const CM = new Matrix(CM2.matrix)\n      CM2.matrix = CM.divColumnVector(CM2.matrix.map(row => _.sum(row) + 0.01)).to2DArray()\n\n      const plotlyMatrixData = [\n        {\n          x: CM2.labels,\n          y: CM2.labels,\n          z: CM2.matrix,\n          type: 'heatmap'\n        }\n      ]\n\n      const layout = {\n        title: 'ConfusionMatrix',\n        annotations: [],\n        xaxis: {\n          ticks: '',\n          side: 'top'\n        },\n        yaxis: {\n          tickangle: -90,\n          ticks: '',\n          ticksuffix: ' ',\n          width: 700,\n          height: 700,\n          autosize: false\n        }\n      }\n\n      for (let i = 0; i < CM2.labels.length; i++) {\n        for (let j = 0; j < CM2.labels.length; j++) {\n          const result = {\n            xref: 'x1',\n            yref: 'y1',\n            x: CM2.labels[j],\n            y: CM2.labels[i],\n            text: CM2.matrix[i][j],\n            font: {\n              family: 'Arial',\n              size: 12,\n              color: 'rgb(50, 171, 96)'\n            },\n            showarrow: false\n          }\n          layout.annotations.push(result)\n        }\n      }\n      longJobsPool[req.params.jobId].data = { data: plotlyMatrixData, layout: layout }\n    }\n    res.send(longJobsPool[req.params.jobId])\n  })\n}\n"]}