{"version":3,"sources":["../models/embedder.ts"],"names":["BotpressEmbedder","constructor","botName","ghost","model_name","cache_root","load","axiosConfig","timeout","cache","lru","length","arr","BYTES_PER_ELEMENT","Float32Array","max","fileExists","stringDump","readFileAsString","dump","JSON","parse","kve","map","x","e","k","v","from","Object","values","save","upsertFile","stringify","embed","sentence","cache_key","crypto","createHash","update","digest","has","Array","get","data","axios","post","utterances","trim","set","PythonEmbedder","documents","embedding"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/visualisation/src/backend","sourcesContent":["import axios from 'axios'\nimport * as sdk from 'botpress/sdk'\nimport crypto from 'crypto'\nimport lru from 'lru-cache'\n\nexport class BotpressEmbedder {\n  cache_root: string\n  cache: lru<string, Float32Array>\n  model_name: string\n  axiosConfig\n\n  constructor(public botName, private ghost: sdk.ScopedGhostService) {\n    this.model_name = 'BotpressEmbedder'\n    this.cache_root = './cache/BotpressEmbedder'\n  }\n\n  async load(axiosConfig) {\n    axiosConfig.timeout = 1000000\n    this.axiosConfig = axiosConfig\n    this.cache = new lru<string, Float32Array>({\n      length: (arr: Float32Array) => {\n        if (arr && arr.BYTES_PER_ELEMENT) {\n          return arr.length * arr.BYTES_PER_ELEMENT\n        } else {\n          return 300 /* dim */ * Float32Array.BYTES_PER_ELEMENT\n        }\n      },\n      max: 300 /* dim */ * Float32Array.BYTES_PER_ELEMENT /* bytes */ * 10000000 /* 10M sentences */\n    })\n    if (await this.ghost.fileExists(this.cache_root, 'embedder_cache.json')) {\n      const stringDump = await this.ghost.readFileAsString(this.cache_root, 'embedder_cache.json')\n      const dump = JSON.parse(stringDump)\n      if (dump) {\n        const kve = dump.map(x => ({ e: x.e, k: x.k, v: Float32Array.from(Object.values(x.v)) }))\n        this.cache.load(kve)\n      }\n    }\n  }\n\n  async save() {\n    await this.ghost.upsertFile(this.cache_root, 'embedder_cache.json', JSON.stringify(this.cache.dump()))\n  }\n\n  async embed(sentence: string): Promise<number[]> {\n    this.axiosConfig.timeout = 8000\n    const cache_key = crypto\n      .createHash('md5')\n      .update(sentence)\n      .digest('hex')\n    if (this.cache.has(cache_key)) {\n      return Array.from(this.cache.get(cache_key).values())\n    } else {\n      const { data } = await axios.post(\n        `http://localhost:3000/api/v1/bots/${this.botName}/mod/nlu/embed`,\n        { utterances: [sentence.trim()] },\n        this.axiosConfig\n      )\n      this.cache.set(cache_key, Float32Array.from(data[0]))\n      return data[0]\n    }\n  }\n}\n\nexport class PythonEmbedder {\n  cache_root: string\n  cache: lru<string, Float32Array>\n  model_name: string\n  axiosConfig\n\n  constructor(private ghost: sdk.ScopedGhostService) {\n    this.model_name = 'PythonEmbedder'\n    this.cache_root = './cache/PythonEmbedder'\n  }\n\n  async load(axiosConfig) {\n    axiosConfig.timeout = 1000000\n    this.axiosConfig = axiosConfig\n    this.cache = new lru<string, Float32Array>({\n      length: (arr: Float32Array) => {\n        if (arr && arr.BYTES_PER_ELEMENT) {\n          return arr.length * arr.BYTES_PER_ELEMENT\n        } else {\n          return 512 /* dim */ * Float32Array.BYTES_PER_ELEMENT\n        }\n      },\n      max: 512 /* dim */ * Float32Array.BYTES_PER_ELEMENT /* bytes */ * 10000000 /* 10M sentences */\n    })\n    if (await this.ghost.fileExists(this.cache_root, 'embedder_cache.json')) {\n      const stringDump = await this.ghost.readFileAsString(this.cache_root, 'embedder_cache.json')\n      const dump = JSON.parse(stringDump)\n      if (dump) {\n        const kve = dump.map(x => ({ e: x.e, k: x.k, v: Float32Array.from(Object.values(x.v)) }))\n        this.cache.load(kve)\n      }\n    }\n  }\n\n  async save() {\n    await this.ghost.upsertFile(this.cache_root, 'embedder_cache.json', JSON.stringify(this.cache.dump()))\n  }\n\n  async embed(sentence: string): Promise<number[]> {\n    const cache_key = crypto\n      .createHash('md5')\n      .update(sentence)\n      .digest('hex')\n    if (this.cache.has(cache_key)) {\n      return Array.from(this.cache.get(cache_key).values())\n    } else {\n      const { data } = await axios.post('http://localhost:8000/embeddings', { documents: [sentence] })\n      const embedding: number[] = data.data[0]\n      this.cache.set(cache_key, Float32Array.from(embedding))\n      return embedding\n    }\n  }\n}\n"]}