{"version":3,"sources":["../models/botpress_predictor.ts"],"names":["sleep","ms","Promise","resolve","setTimeout","BotpressPredictor","constructor","axiosConfig","botName","baseUrl","userId","_","uniqueId","predict","question","tries","maxTries","success","response","axios","post","type","text","err","data","nlu","intent","confidence","context","name","slots","intents","label","replace"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,SAASA,KAAT,CAAeC,EAAf,EAA2B;AACzB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACD;;AAEM,MAAMI,iBAAN,CAAwB;AAE7BC,EAAAA,WAAW,CAAQC,WAAR,EAA4BC,OAA5B,EAAqC;AAAA,SAA7BD,WAA6B,GAA7BA,WAA6B;AAAA,SAATC,OAAS,GAATA,OAAS;;AAAA;;AAC9C,SAAKD,WAAL,CAAiBE,OAAjB,GAA4B,qCAAoC,KAAKD,OAAQ,EAA7E;AACA,SAAKE,MAAL,GAAcC,gBAAEC,QAAF,CAAW,OAAX,CAAd;AACD;;AACD,QAAMC,OAAN,CAAcC,QAAd,EAAwB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAIC,KAAK,GAAG,CAAZ;AACA,UAAMC,QAAQ,GAAG,CAAjB;AACA,QAAIC,OAAO,GAAG,KAAd;AACA,QAAIC,QAAJ;;AACA,WAAO,CAACD,OAAD,IAAYF,KAAK,IAAIC,QAA5B,EAAsC;AACpC,UAAI;AACFE,QAAAA,QAAQ,GAAG,MAAMC,eAAMC,IAAN,CACd,aAAY,KAAKV,MAAO,+BADV,EAEf;AACEW,UAAAA,IAAI,EAAE,MADR;AAEEC,UAAAA,IAAI,EAAER;AAFR,SAFe,EAMf,KAAKP,WANU,CAAjB;AAQAU,QAAAA,OAAO,GAAG,IAAV;AACD,OAVD,CAUE,OAAOM,GAAP,EAAY;AACZR,QAAAA,KAAK;AACL,cAAMf,KAAK,CAAC,IAAD,CAAX;;AACA,YAAIe,KAAK,GAAGC,QAAZ,EAAsB;AACpB,gBAAMO,GAAN;AACD;AACF;AACF;;AAED,UAAM;AACJC,MAAAA,IAAI,EAAE;AACJC,QAAAA,GAAG,EAAE;AACHC,UAAAA,MAAM,EAAE;AAAEC,YAAAA,UAAF;AAAcC,YAAAA,OAAd;AAAuBC,YAAAA;AAAvB,WADL;AAEHC,UAAAA,KAFG;AAGHC,UAAAA;AAHG;AADD;AADF,QAQFb,QARJ,CArCsB,CA+CtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAO;AAAEc,MAAAA,KAAK,EAAEH,IAAI,CAACI,OAAL,CAAa,SAAb,EAAwB,EAAxB,EAA4BA,OAA5B,CAAoC,IAApC,EAA0C,EAA1C,CAAT;AAAwDN,MAAAA;AAAxD,KAAP;AACD;;AAtE4B","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/visualisation/src/backend","sourcesContent":["import axios, { AxiosResponse } from 'axios'\nimport _ from 'lodash'\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport class BotpressPredictor {\n  userId\n  constructor(public axiosConfig, public botName) {\n    this.axiosConfig.baseUrl = `http://localhost:3000/api/v1/bots/${this.botName}`\n    this.userId = _.uniqueId('user_')\n  }\n  async predict(question) {\n    // const {\n    //   data: { nlu }\n    // } = await axios.post(\n    //   // 'mod/nlu/predict',\n    //   `/converse/${this.userId}/secured?include=decision,nlu`,\n    //   {\n    //     type: 'text',\n    //     text: question\n    //   },\n    //   this.axiosConfig\n    // )\n\n    let tries = 1\n    const maxTries = 5\n    let success = false\n    let response\n    while (!success && tries <= maxTries) {\n      try {\n        response = await axios.post(\n          `/converse/${this.userId}/secured?include=decision,nlu`,\n          {\n            type: 'text',\n            text: question\n          },\n          this.axiosConfig\n        )\n        success = true\n      } catch (err) {\n        tries++\n        await sleep(2000)\n        if (tries > maxTries) {\n          throw err\n        }\n      }\n    }\n\n    const {\n      data: {\n        nlu: {\n          intent: { confidence, context, name },\n          slots,\n          intents\n        }\n      }\n    } = response as AxiosResponse\n\n    // const pred = _.chain(nlu.predictions)\n    //   .toPairs()\n    //   .flatMap(([ctx, ctxPredObj]) => {\n    //     return ctxPredObj.intents.map(intentPred => {\n    //       const oosFactor = 1 - ctxPredObj.oos\n    //       return {\n    //         contexts: [ctx],\n    //         feedbacks: [],\n    //         label: intentPred.label,\n    //         confidence: intentPred.confidence * oosFactor * ctxPredObj.confidence\n    //       }\n    //     })\n    //   })\n    //   .maxBy('confidence')\n    //   .value()\n    // return { label: pred.label, confidence: pred.confidence }\n    return { label: name.replace('__qna__', '').replace('\",', ''), confidence }\n  }\n}\n"]}