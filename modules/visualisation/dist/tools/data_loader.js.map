{"version":3,"sources":["../tools/data_loader.ts"],"names":["splitTrainToTrainAndTest","state","ghost","fileExists","intentsFiles","directoryListing","file","intentData","readFileAsObject","upsertFile","JSON","stringify","tests","intentDatas","languages","Object","keys","utterances","lang","test_utts","_","sampleSize","floor","length","train_utts","filter","s","includes","concat","map","id","crypto","createHash","update","digest","conditions","contexts","name","utterance","context","getTrainTestDatas","embedder","model_name","vectorized_train","vectorized_test","trainDatas","testDatas","train","test","rawTrain","rawTest","jsonData","push","testFileExist","console","log","intents","uniqBy","o","number2intents","intent2number","zipObject","values","entry","utt_emb","embed","utt","label","parseInt","intent","config","readFileAsString","parse","undefined"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/visualisation/src/backend","sourcesContent":["import crypto from 'crypto'\nimport _ from 'lodash'\n\nimport { Data, RawData, Test, VisuState } from '../backend/typings'\n\nexport async function splitTrainToTrainAndTest(state: VisuState) {\n  // Backup the real intent folder\n  if (!(await state.ghost.fileExists('./', 'raw_intents'))) {\n    const intentsFiles = await state.ghost.directoryListing('./intents', '*.json')\n    for (const file of intentsFiles) {\n      const intentData = await state.ghost.readFileAsObject<RawData>('./intents', file)\n      await state.ghost.upsertFile('./raw_intents', file, JSON.stringify(intentData))\n    }\n  }\n  // In the new\n  const intentsFiles = await state.ghost.directoryListing('./raw_intents', '*.json')\n  const tests: Test[] = []\n  for (const file of intentsFiles) {\n    const intentDatas = await state.ghost.readFileAsObject<RawData>('./raw_intents', file)\n    const languages = Object.keys(intentDatas.utterances)\n    for (const lang of languages) {\n      const test_utts = _.sampleSize(intentDatas.utterances[lang], _.floor(intentDatas.utterances[lang].length / 4))\n      const train_utts = intentDatas.utterances[lang].filter(s => !test_utts.includes(s))\n      intentDatas.utterances[lang] = train_utts\n      tests.concat(\n        test_utts.map(s => {\n          return {\n            id: crypto\n              .createHash('md5')\n              .update(s)\n              .digest('hex'),\n            conditions: [\n              ['context', 'is', intentDatas.contexts[0]],\n              ['intent', 'is', intentDatas.name]\n            ],\n            utterance: s,\n            context: intentDatas.contexts[0]\n          } as Test\n        })\n      )\n    }\n    await state.ghost.upsertFile('./intents', file, JSON.stringify(intentDatas))\n  }\n  await state.ghost.upsertFile('./', 'nlu-tests.json', JSON.stringify(tests))\n}\nexport async function getTrainTestDatas(state: VisuState) {\n  if (\n    (await state.ghost.fileExists(`. / datas / ${state.embedder.model_name}`, 'test_set.json')) &&\n    (await state.ghost.fileExists(`. / datas / ${state.embedder.model_name}`, 'train_set.json'))\n  ) {\n    const vectorized_train: Data[] = await state.ghost.readFileAsObject<Data[]>(\n      `./datas/${state.embedder.model_name}`,\n      'train_set.json'\n    )\n    const vectorized_test: Data[] = await state.ghost.readFileAsObject<Data[]>(\n      `./datas/${state.embedder.model_name}`,\n      'test_set.json'\n    )\n    state.trainDatas = vectorized_train\n    state.testDatas = vectorized_test\n    return { train: vectorized_train, test: vectorized_test }\n  }\n  const rawTrain: RawData[] = []\n  let rawTest: Test[] = []\n\n  const intentsFiles = await state.ghost.directoryListing('./intents', '*.json')\n  for (const file of intentsFiles) {\n    const jsonData = await state.ghost.readFileAsObject<RawData>('./intents', file)\n    rawTrain.push(jsonData)\n  }\n\n  const testFileExist = await state.ghost.fileExists('./', 'nlu-tests.json')\n  if (testFileExist) {\n    rawTest = await state.ghost.readFileAsObject<Test[]>('./', 'nlu-tests.json')\n  } else {\n    console.log('No test file found : You need a test file to run confusion matrix !')\n    console.log('Running a splitter to create 1/4 of training datas to test')\n    await splitTrainToTrainAndTest(state)\n    rawTest = await state.ghost.readFileAsObject<Test[]>('./', 'nlu-tests.json')\n  }\n\n  const intents = _.uniqBy(rawTrain, 'name').map(o => o.name)\n  const number2intents: any = { ...intents }\n  const intent2number = _.zipObject(Object.values(number2intents), Object.keys(number2intents))\n\n  const vectorized_test: Data[] = []\n  const vectorized_train: Data[] = []\n\n  for (const entry of rawTest) {\n    const utt_emb = await state.embedder.embed(entry.utterance)\n    vectorized_test.push({\n      utt: entry.utterance,\n      utt_emb,\n      label: parseInt(intent2number[entry.conditions[0][2]]),\n      intent: entry.conditions[1][2]\n    } as Data)\n  }\n\n  const config = await state.ghost.readFileAsString('./', 'bot.config.json')\n  const lang = JSON.parse(config).languages[0]\n  console.log('LANG', JSON.parse(config).id, lang)\n  for (const entry of rawTrain) {\n    // console.log(entry.utterances)\n    // console.log(entry.utterances[lang])\n    for (const utt of entry.utterances[lang]) {\n      const utt_emb = await state.embedder.embed(utt)\n      vectorized_train.push({\n        utt,\n        utt_emb,\n        label: parseInt(intent2number[entry.name]),\n        intent: entry.name\n      } as Data)\n    }\n  }\n  console.log('going to write')\n  await state.ghost.upsertFile(\n    `. / datas / ${state.embedder.model_name}`,\n    'test_set.json',\n    JSON.stringify(vectorized_test, undefined, 2)\n  )\n  console.log('written test')\n  await state.ghost.upsertFile(\n    `. / datas / ${state.embedder.model_name}`,\n    'train_set.json',\n    JSON.stringify(vectorized_train, undefined, 2)\n  )\n  console.log('written train')\n  state.trainDatas = vectorized_train\n  state.testDatas = vectorized_test\n  return { train: vectorized_train, test: vectorized_test }\n}\n"]}