{"version":3,"sources":["../tools/data_loader.ts"],"names":["getTrainTestDatas","state","ghost","fileExists","embedder","model_name","vectorized_train","readFileAsObject","vectorized_test","trainDatas","testDatas","train","test","rawTrain","rawTest","intentsFiles","directoryListing","file","jsonData","push","testFileExist","console","log","intents","_","uniqBy","map","o","name","number2intents","intent2number","zipObject","Object","values","keys","entry","utt_emb","embed","utterance","utt","label","parseInt","conditions","intent","config","readFileAsString","lang","JSON","parse","languages","id","utterances","upsertFile","stringify","undefined"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/visualisation/src/backend","sourcesContent":["import _ from 'lodash'\n\nimport { Data, RawData } from '../backend/typings'\nimport { VisuState } from '../backend/typings'\n\nexport type Test = { id: string; utterance: string; context: string; conditions: [string, string, string][] }\n\nexport async function getTrainTestDatas(state: VisuState) {\n  if (\n    (await state.ghost.fileExists(`./datas/${state.embedder.model_name}`, 'test_set.json')) &&\n    (await state.ghost.fileExists(`./datas/${state.embedder.model_name}`, 'train_set.json'))\n  ) {\n    const vectorized_train: Data[] = await state.ghost.readFileAsObject<Data[]>(\n      `./datas/${state.embedder.model_name}`,\n      'train_set.json'\n    )\n    const vectorized_test: Data[] = await state.ghost.readFileAsObject<Data[]>(\n      `./datas/${state.embedder.model_name}`,\n      'test_set.json'\n    )\n    state.trainDatas = vectorized_train\n    state.testDatas = vectorized_test\n    return { train: vectorized_train, test: vectorized_test }\n  }\n  const rawTrain: RawData[] = []\n  let rawTest: Test[] = []\n\n  const intentsFiles = await state.ghost.directoryListing('./intents', '*.json')\n  for (const file of intentsFiles) {\n    const jsonData = await state.ghost.readFileAsObject<RawData>('./intents', file)\n    rawTrain.push(jsonData)\n  }\n\n  const testFileExist = await state.ghost.fileExists('./', 'nlu-tests.json')\n  if (testFileExist) {\n    rawTest = await state.ghost.readFileAsObject<Test[]>('./', 'nlu-tests.json')\n  } else {\n    console.log('No test file found : You need a test file to run confusion matrix !')\n  }\n\n  const intents = _.uniqBy(rawTrain, 'name').map(o => o.name)\n  const number2intents: any = { ...intents }\n  const intent2number = _.zipObject(Object.values(number2intents), Object.keys(number2intents))\n\n  const vectorized_test: Data[] = []\n  const vectorized_train: Data[] = []\n\n  for (const entry of rawTest) {\n    const utt_emb = await state.embedder.embed(entry.utterance)\n    vectorized_test.push({\n      utt: entry.utterance,\n      utt_emb,\n      label: parseInt(intent2number[entry.conditions[0][2]]),\n      intent: entry.conditions[1][2]\n    } as Data)\n  }\n\n  const config = await state.ghost.readFileAsString('./', 'bot.config.json')\n  const lang = JSON.parse(config).languages[0]\n  console.log('LANG', JSON.parse(config).id, lang)\n  for (const entry of rawTrain) {\n    // console.log(entry.utterances)\n    // console.log(entry.utterances[lang])\n    for (const utt of entry.utterances[lang]) {\n      const utt_emb = await state.embedder.embed(utt)\n      vectorized_train.push({\n        utt,\n        utt_emb,\n        label: parseInt(intent2number[entry.name]),\n        intent: entry.name\n      } as Data)\n    }\n  }\n  console.log('going to write')\n  await state.ghost.upsertFile(\n    `./datas/${state.embedder.model_name}`,\n    'test_set.json',\n    JSON.stringify(vectorized_test, undefined, 2)\n  )\n  console.log('written test')\n  await state.ghost.upsertFile(\n    `./datas/${state.embedder.model_name}`,\n    'train_set.json',\n    JSON.stringify(vectorized_train, undefined, 2)\n  )\n  console.log('written train')\n  state.trainDatas = vectorized_train\n  state.testDatas = vectorized_test\n  return { train: vectorized_train, test: vectorized_test }\n}\n"]}