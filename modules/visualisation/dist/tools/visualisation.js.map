{"version":3,"sources":["../tools/visualisation.ts"],"names":["clustering","require","computeConfusionMatrix","state","glob_res","results","entry","testDatas","pred","predictor","predict","utt","push","acc","label","intent","conf","confidence","gt","CM2","ConfusionMatrix","fromLabels","map","o","console","log","filter","length","ghost","upsertFile","embedder","model_name","JSON","stringify","undefined","computeEmbeddingSimilarity","intentDatas","_","groupBy","trainDatas","intentEmb","key","Object","prototype","hasOwnProperty","call","meanEmb","utt_emb","reduce","tot","cur","Matrix","add","zeros","div","to1DArray","indexAndIntent","Array","from","keys","entries","simMat","matrix","labels","index","row","indexTodo","keyTodo","round","similarity","cosine","plotlyMatrixData","x","y","z","type","computeScatterEmbeddings","pca","PCA","variance","getExplainedVariance","slice","sum","grouped_intents","traces","k","v","i","get","mode","name","text","marker","size","color","computeTsneScatterEmbeddings","output","fileExists","outputString","readFileAsString","parse","model","TSNE","dim","perplexity","earlyExaggeration","learningRate","nIter","metric","init","data","error","iter","run","getOutput","c","computeIntentSimilarity","rowMat","rowText","intentTodo","oTodo","bestBadUttsText","bestBadUttsNb","kmeans","KMEANS","cluster1","cluster2","concat","clusterO","mean","badUttsText","badUttsNb","p","includes","join","arraySum","a","b","elt","arrayDiv","closest","minIndex","minDistance","point","dist","distance","euclidean","computeOutliers","intentsData","dbPerIntent","mapValues","embedArray","e","meanDist","curr","dbscan","DBSCAN","clusters","floor","outliers","noise","indexList"],"mappings":"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","sourceRoot":"/mnt/Documents/Projets/BotPress/botpress/modules/visualisation/src/backend","sourcesContent":["import { text } from 'body-parser'\nimport _ from 'lodash'\nimport ConfusionMatrix from 'ml-confusion-matrix'\nimport { distance, similarity } from 'ml-distance'\nimport { Matrix } from 'ml-matrix'\nimport { PCA } from 'ml-pca'\nimport TSNE from 'tsne-js'\n\nimport { VisuState } from '../backend/typings'\nconst clustering = require('density-clustering')\n\nexport async function computeConfusionMatrix(\n  state: VisuState,\n  glob_res: { utt: string; acc: boolean; conf: number; pred: string; gt: string }[]\n) {\n  const results = []\n  for (const entry of state.testDatas) {\n    const pred = await state.predictor.predict(entry.utt)\n    results.push({\n      utt: entry.utt,\n      acc: pred.label === entry.intent,\n      conf: pred.confidence,\n      pred: pred.label,\n      gt: entry.intent\n    })\n\n    glob_res.push({\n      utt: entry.utt,\n      acc: pred.label === entry.intent,\n      conf: pred.confidence,\n      pred: pred.label,\n      gt: entry.intent\n    })\n  }\n\n  const CM2 = ConfusionMatrix.fromLabels(\n    results.map(o => o.gt),\n    results.map(o => o.pred)\n  )\n\n  console.log(\n    'sdffsdfsdfsdfsd',\n    `\\n\\n ${results.filter(o => o.acc).length}/${results.length} : ${results.filter(o => o.acc).length /\n      results.length}  \\n\\n`\n  )\n  await state.ghost.upsertFile(\n    `./datas/${state.embedder.model_name}/results`,\n    'confusion_matrix.json',\n    JSON.stringify(results, undefined, 2)\n  )\n  return CM2\n}\n\nexport async function computeEmbeddingSimilarity(state: VisuState) {\n  const intentDatas = _.groupBy(state.trainDatas, 'intent')\n\n  const intentEmb = {}\n  for (const key in intentDatas) {\n    if (Object.prototype.hasOwnProperty.call(intentDatas, key)) {\n      const meanEmb = intentDatas[key]\n        .map(o => o.utt_emb)\n        .reduce((tot, cur) => {\n          return Matrix.add(tot, new Matrix([cur]))\n        }, Matrix.zeros(1, intentDatas[key][0].utt_emb.length))\n      intentEmb[key] = Matrix.div(meanEmb, intentDatas[key].length).to1DArray()\n    }\n  }\n  // console.log(intentEmb)\n\n  const indexAndIntent = Array.from(Object.keys(intentEmb).entries())\n  const simMat = { matrix: [], labels: [] }\n  debugger\n  for (const [index, key] of indexAndIntent) {\n    debugger\n    const row = []\n    for (const [indexTodo, keyTodo] of indexAndIntent) {\n      if (index === indexTodo) {\n        row.push(1)\n      } else {\n        row.push(_.round(similarity.cosine(intentEmb[key], intentEmb[keyTodo]), 2))\n      }\n    }\n    simMat.labels.push(key)\n    simMat.matrix.push(row)\n  }\n\n  const plotlyMatrixData = [\n    {\n      x: simMat.labels,\n      y: simMat.labels,\n      z: simMat.matrix,\n      type: 'heatmap'\n    }\n  ]\n  await state.ghost.upsertFile(\n    `./datas/${state.embedder.model_name}/results`,\n    'similarity_matrix.json',\n    JSON.stringify(simMat, undefined, 2)\n  )\n  return plotlyMatrixData\n}\n\nexport async function computeScatterEmbeddings(state: VisuState) {\n  const pca = new PCA(state.trainDatas.map(o => o.utt_emb))\n  const variance = pca.getExplainedVariance()\n  console.log(`Top 3 variance ${variance.slice(0, 3).map(o => _.round(o, 2))}`)\n  console.log(`Accounting for ${_.round(_.sum(variance.slice(0, 3)), 2)}%`)\n  const grouped_intents = _.groupBy(state.trainDatas, 'intent')\n  const traces = []\n  Object.entries(grouped_intents).map(([k, v]: [string, any[]], i) =>\n    traces.push({\n      x: v.map(o => pca.predict([o.utt_emb]).get(0, 0)),\n      y: v.map(o => pca.predict([o.utt_emb]).get(0, 1)),\n      z: v.map(o => pca.predict([o.utt_emb]).get(0, 2)),\n      mode: 'markers',\n      type: 'scatter3d',\n      name: k,\n      text: v.map(o => o.utt),\n      marker: { size: 8, color: i }\n    })\n  )\n  return traces\n}\n\nexport async function computeTsneScatterEmbeddings(state: VisuState) {\n  let output = []\n  if (await state.ghost.fileExists('./datas', 'tsne.json')) {\n    const outputString = await state.ghost.readFileAsString('./datas', 'tsne.json')\n    output = JSON.parse(outputString)\n  } else {\n    const model = new TSNE({\n      dim: 3,\n      perplexity: 10.0,\n      earlyExaggeration: 4.0,\n      learningRate: 100.0,\n      nIter: 1000,\n      metric: 'euclidean'\n    })\n    model.init({\n      data: state.trainDatas.map(o => o.utt_emb),\n      type: 'dense'\n    })\n\n    const [error, iter] = model.run()\n    output = model.getOutput()\n    await state.ghost.upsertFile('./datas', 'tsne.json', JSON.stringify(output, undefined, 2))\n  }\n  const traces = []\n  let c = 0\n  for (const intent of Object.keys(_.groupBy(state.trainDatas, 'intent'))) {\n    traces.push({\n      x: state.trainDatas.map((o, i) => {\n        if (o.intent === intent) {\n          return output[i][0]\n        }\n      }),\n      y: state.trainDatas.map((o, i) => {\n        if (o.intent === intent) {\n          return output[i][1]\n        }\n      }),\n      z: state.trainDatas.map((o, i) => {\n        if (o.intent === intent) {\n          return output[i][2]\n        }\n      }),\n      mode: 'markers',\n      type: 'scatter3d',\n      name: intent,\n      text: state.trainDatas.filter(o => o.intent === intent).map(o => o.utt),\n      marker: { size: 8, color: c }\n    })\n    c += 1\n  }\n  return traces\n}\n\nexport async function computeIntentSimilarity(state: VisuState) {\n  const grouped_intents = _.groupBy(state.trainDatas, 'intent')\n  const simMat = { matrix: [], labels: [], text: [] }\n  debugger\n  for (const [intent, o] of Object.entries(grouped_intents)) {\n    const rowMat = []\n    const rowText = []\n    for (const [intentTodo, oTodo] of Object.entries(grouped_intents)) {\n      if (intent === intentTodo) {\n        rowMat.push(0)\n        rowText.push('')\n      } else {\n        let bestBadUttsText = []\n        let bestBadUttsNb = 10000\n        for (let i = 0; i < 10; i++) {\n          const kmeans = new clustering.KMEANS()\n          const [cluster1, cluster2] = kmeans.run(\n            o.concat(oTodo).map(o => o.utt_emb),\n            2\n          )\n          const clusterO = _.mean(cluster1) < _.mean(cluster2) ? cluster1 : cluster2\n          // debugger\n          const badUttsText = []\n          let badUttsNb = 0\n          o.map((p, i) => {\n            if (!clusterO.includes(i)) {\n              badUttsText.push(p.utt)\n              badUttsNb += 1\n            }\n          })\n          if (badUttsNb < bestBadUttsNb) {\n            bestBadUttsNb = badUttsNb\n            bestBadUttsText = badUttsText\n          }\n        }\n        rowMat.push(bestBadUttsNb)\n        rowText.push(bestBadUttsText.join('<br>'))\n      }\n    }\n    simMat.labels.push(intent)\n    simMat.matrix.push(rowMat)\n    simMat.text.push(rowText)\n  }\n  const plotlyMatrixData = [\n    {\n      x: simMat.labels,\n      y: simMat.labels,\n      z: simMat.matrix,\n      text: simMat.text,\n      type: 'heatmap'\n    }\n  ]\n  console.log('Done testing intents')\n  return plotlyMatrixData\n}\n\nfunction arraySum(a: number[], b: number[]): number[] {\n  return a.map((elt, i) => elt + b[i])\n}\n\nfunction arrayDiv(a: number[], b: number): number[] {\n  return a.map(elt => elt / b)\n}\n\nfunction closest(a: number[], b: number[][], index: number): number {\n  let minIndex = undefined\n  let minDistance = 100000\n  b.map((point, i) => {\n    const dist = distance.euclidean(a, point)\n    if (dist < minDistance && i !== index) {\n      minIndex = i\n      minDistance = dist\n    }\n  })\n  return minDistance\n}\n\nexport function computeOutliers(state: VisuState) {\n  // const embedLen = state.trainDatas[0].utt_emb.length\n  // const intentsData = _.groupBy(state.trainDatas, 'intent')\n  // // const embedPerIntent = _.mapValues(intentsData, o => o.map(p => p.utt_emb))\n  // const centroidPerIntent = _.mapValues(intentsData, o =>\n  //   arrayDiv(\n  //     o.reduce((sum, elt) => arraySum(elt.utt_emb, sum), new Array(embedLen).fill(0)),\n  //     o.length\n  //   )\n  // )\n\n  // const deviationToCenterPerIntent = _.mapValues(intentsData, (v, k) =>\n  //   Math.sqrt(v.reduce((sum, elt) => distance.euclidean(elt.utt_emb, centroidPerIntent[k]), 0) / v.length)\n  // )\n\n  // const outliersPerIntent = _.mapValues(intentsData, (v, k) =>\n  //   v\n  //     .map(elt => {\n  //       return { ...elt, dist: distance.euclidean(elt.utt_emb, centroidPerIntent[k]) }\n  //     })\n  //     .filter(elt => elt.dist > 3 * deviationToCenterPerIntent[k])\n  // )\n\n  // return { out: outliersPerIntent, dev: deviationToCenterPerIntent }\n  const intentsData = _.groupBy(state.trainDatas, 'intent')\n  // console.log('PLop')\n  const dbPerIntent = _.mapValues(intentsData, o => {\n    const embedArray = o.map(e => e.utt_emb)\n    const meanDist = o.reduce((sum, curr, index) => {\n      if (index < o.length - 1) {\n        return sum + closest(curr.utt_emb, embedArray, index)\n      }\n      return sum / o.length\n    }, 0)\n    // console.log(meanDist)\n    const dbscan = new clustering.DBSCAN()\n    // parameters: 5 - neighborhood radius, 2 - number of points in neighborhood to form a cluster\n    const clusters = dbscan.run(embedArray, meanDist + 0.5 * meanDist, _.floor(o.length / 3))\n    // console.log('Clusters', clusters, 'Noise', dbscan.noise)\n    return {\n      outliers: dbscan.noise.map(i => o[i].utt),\n      clusters: clusters.map(indexList => indexList.map(i => o[i].utt))\n    }\n  })\n  console.log(dbPerIntent)\n  return dbPerIntent\n}\n"]}